adzuna_description = r.test3
print(adzuna_description)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: 1. translate any non-English sections of the text into English?; 2. Identify requirements for the job and return them as itemized points. Make sure there is only one item per point (e.g. 'Python or R' should be listed as one entry for Python and one entry for R); 3. Assign the requirements to groupings: 'soft skills', 'technical skills', 'education', 'experience' [" + adzuna_description +"]"
)
print(adzuna_summary)
### Following the method from this course: https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/
import openai
import os
import time
##COMMENT UP THIS CODE!!!
with open('/home/pete/Documents/gpt_key.txt') as t:
openai.api_key = t.readlines()[0].strip("\n")
def get_completion(prompt, model="gpt-3.5-turbo", temperature = 0):
messages = [{"role": "user", "content": prompt}]
response = openai.ChatCompletion.create(
model=model,
messages=messages,
temperature=temperature, # this is the degree of randomness of the model's output
)
return response.choices[0].message["content"]
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: 1. translate any non-English sections of the text into English?; 2. Identify requirements for the job and return them as itemized points. Make sure there is only one item per point (e.g. 'Python or R' should be listed as one entry for Python and one entry for R); 3. Assign the requirements to groupings: 'soft skills', 'technical skills', 'education', 'experience' [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: 1. translate any non-English sections of the text into English; 2. Identify requirements for the job and return them as itemized points. 3. Return only the list of job requirements [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: 1. Identify requirements for the job and return them as itemized points in English. Do not return any text other than the requirements, please! [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Do not return any text other than the requirements, please! [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills (e.g. phrase 'SQL, Excel, and Power BI' should produce three items on the list you return: 'SQL', 'Excel', 'Power BI'). Please do not return any text other than the requirements, please! [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills (e.g. phrase 'SQL, Excel, and Power BI' should produce three items on the list you return: 'SQL', 'Excel', 'Power BI'). Please do not return any text other than the requirements, please! Please provide your answer as a Python list [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills (e.g. phrase 'SQL, Excel, and Power BI' should produce three items on the list you return: 'SQL', 'Excel', 'Power BI'). Please do not return any text other than the requirements, please! Please provide your answer, including the soft skills, as a Python list [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills (e.g. phrase 'SQL, Excel, and Power BI' should produce three items on the list you return: 'SQL', 'Excel', 'Power BI'). Group into soft skills and technical skills. Please do not return any text other than the requirements, please! [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills (e.g. phrase 'SQL, Excel, and Power BI' should produce three items on the list you return: 'SQL', 'Excel', 'Power BI'). Group into soft skills, technical skills and qualifications. Provide the return in JSON format please! [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills (e.g. phrase 'SQL, Excel, and Power BI' should produce three items on the list you return: 'SQL', 'Excel', 'Power BI'). Group into soft skills, technical skills and qualifications. Integrate any optional skills/qualifications into one of the three categories (soft skills, technical skills, and qualifications). Provide the return in JSON format please! [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills (e.g. phrase 'SQL, Excel, and Power BI' should produce three items on the list you return: 'SQL', 'Excel', 'Power BI'). Group into soft skills, technical skills and qualifications (and no other categories). Provide the return in JSON format please! [" + adzuna_description +"]"
)
print(adzuna_summary)
### Now lets pass a job description to Chat GPT and build a prompt
adzuna_description = r.test3
print(adzuna_description)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills (e.g. phrase 'SQL, Excel, and Power BI' should produce three items on the list you return: 'SQL', 'Excel', 'Power BI'). Group into soft skills, technical skills and qualifications. Provide the return in JSON format please! [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills (e.g. phrase 'SQL, Excel, and Power BI' should produce three items on the list you return: 'SQL', 'Excel', 'Power BI'). Group into soft skills, technical skills and qualifications. Provide the return in JSON format please! [" + adzuna_description +"]"
)
print(adzuna_summary)
### Now lets pass a job description to Chat GPT and build a prompt
adzuna_description = r.test3
print(adzuna_description)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills (e.g. phrase 'SQL, Excel, and Power BI' should produce three items on the list you return: 'SQL', 'Excel', 'Power BI'). Group into soft skills, technical skills and qualifications. Provide the return in JSON format please! [" + adzuna_description +"]"
)
print(adzuna_summary)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills. Group into soft skills, technical skills and qualifications. Provide the return in JSON format please! [" + adzuna_description +"]"
)
print(adzuna_summary)
### Now lets pass a job description to Chat GPT and build a prompt
adzuna_description = r.test3
print(adzuna_description)
adzuna_summary = get_completion(
"Dear Chat GPT, could you please conduct the following actions on the test in square brackets: Identify all skills, characteristics and qualifications required for the job and return them as itemized points in English. Split those into individual skills. Group into soft skills, technical skills and qualifications. Provide the return in JSON format please! [" + adzuna_description +"]"
)
print(adzuna_summary)
library(httr)
library(tidyverse)
library(jsonlite)
library(rvest)
library(reticulate)
##This chunk is concerned with getting the API function working
## Write a function to get any given page. After that I can just iterate while there are still jobs to find :)
get_adzuna_api <- function(api_id, api_key, page,
key_words = c("data", "analyst"), country = "ch") { #API ID and key are variables, so that they can remain secret
key_words <- stringr::str_c(key_words[1], "%20", key_words[2]) #Can only take two key words. All needed for most data professions
api_call_string <- stringr::str_c("http://api.adzuna.com/v1/api/jobs/",
country, "/search/", page, "?app_id=",
api_id, "&app_key=", api_key,
"&results_per_page=20&what=", key_words,
"&max_days_old=730&salary_include_unknown=1&content-type=application/json")
api_return <- GET(api_call_string)
api_return_text <- content(api_return, "text")
api_return_df <- jsonlite::fromJSON(api_return_text)
api_return_df$results
}
n_responses <- 20
page <- 1
adzuna_api_returns_raw_13jul23 <- data.frame()
while (n_responses > 0) {
current_response <- get_adzuna_api(
readLines("/home/pete/Documents/adzuna_api.txt")[1],
readLines("/home/pete/Documents/adzuna_api.txt")[2], page) ##Run the API.
adzuna_api_returns_raw_13jul23 <- rbind(adzuna_api_returns_raw_13jul23,
current_response) ## Bind to general results table.
page <- page + 1 #Increase the page number.
n_responses <-nrow(current_response) ## Check response count for the purposes of running the loop.
Sys.sleep(3) ##This is to make sure that we do not hit the 25 hits per minute limit on the API.
}
View(current_response)
View(adzuna_api_returns_raw_13jul23)
