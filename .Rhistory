### Following the method from this course: https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/
import openai
import os
import time
##COMMENT UP THIS CODE!!!
with open('/home/pete/Documents/gpt_key.txt') as t:
openai.api_key = t.readlines()[0].strip("\n")
def get_completion(prompt, model="gpt-3.5-turbo", temperature = 0):
messages = [{"role": "user", "content": prompt}]
response = openai.ChatCompletion.create(
model=model,
messages=messages,
temperature=temperature, # this is the degree of randomness of the model's output
)
return response.choices[0].message["content"]
skills_review_command = "Can you please review the list of skills provided in brackets, standardize it, and return results as a Python list? ["
skills_list = r.skills
skills_review_command = skills_review_command + skills_list + "]"
View(skills_review_command)
skills_review_command = "Can you please review the list of skills provided in brackets, standardize it, and return results as a Python list? ["
skills_list = str(r.skills)
skills_review_command = skills_review_command + skills_list + "]"
View(skills_review_command)
skills_review_command = "Can you please review the list of skills provided in brackets, standardize it, and return results as a Python list? ["
skills_list = str(r.skills)
skills_review_command = skills_review_command + skills_list + "]"
reviewed_skills = get_completion(skills_review_command)
len(skills_list)
skills_list_1 = skills_list[0:15000]
skills_review_command = skills_review_command + skills_list_1 + "]"
reviewed_skills = get_completion(skills_review_command)
len(skills_list)
skills_list_1 = skills_list[0:1000]
skills_review_command = skills_review_command + skills_list_1 + "]"
reviewed_skills = get_completion(skills_review_command)
skills_list_1 = skills_list[0:1]
skills_review_command = skills_review_command + skills_list_1 + "]"
reviewed_skills = get_completion(skills_review_command)
skills_review_command = "Can you please review the list provided in brackets, standardize it, and return results as a Python list? ["
skills_list = str(r.skills)
len(skills_list)
skills_list_1 = skills_list[0:100]
skills_review_command = skills_review_command + skills_list_1 + "]"
reviewed_skills = get_completion(skills_review_command)
reviewed_skills
skills_review_command = "Can you please review the list provided in brackets, identify synonymous items, standardize them, and return a Python list? ["
skills_list = str(r.skills)
len(skills_list)
skills_list_1 = skills_list[0:10000]
skills_review_command = skills_review_command + skills_list_1 + "]"
reviewed_skills = get_completion(skills_review_command)
reviewed_skills
reviewed_skills[1]
reviewed_skills[2]
reviewed_skills[3]
skills_review_command = "Can you please review the list provided in brackets, identify synonymous items, standardize them, and return it as a Python list? ["
reviewed_skills = get_completion(skills_review_command)
reviewed_skills[1]
reviewed_skills[1]
reviewed_skills
skills_review_command = "Please review the list provided in brackets, identify synonymous items, standardize them, and return it as a json object ["
skills_review_command = skills_review_command + skills_list_1 + "]"
reviewed_skills = get_completion(skills_review_command)
len(skills_list)
reviewed_skills
skills_review_command = "Please review the list provided in brackets, identify synonymous items, standardize them, and return a comma seperated string ["
skills_list = str(r.skills)
len(skills_list)
skills_list_1 = skills_list[0:10000]
skills_list_2 = skills_list[10001:20000]
skills_list_3 = skills_list[20001:30000]
skills_list_4 = skills_list[30001:40000]
skills_list_5 = skills_list[40001:51347]
skills_review_command = skills_review_command + skills_list_1 + "]"
reviewed_skills = get_completion(skills_review_command)
reviewed_skills
library(httr)
library(tidyverse)
library(jsonlite)
library(rvest)
library(reticulate)
skills <- read_rds("adzuna_skills.rds")
skills_df <- data.frame(skills = skills) %>%
mutate(skills = str_to_lower(skills)) %>%
group_by(skills) %>%
summarize(
keyword_count = n()
) %>%
arrange(desc(keyword_count))
View(skills_df)
reticulate::repl_python()
skills <- read_rds("adzuna_skills.rds") %>%
str_to_lower()
language_skills <- str_extract(skills, "english|german|french|italian")
language_skills <- str_extract(skills, "english|german|french|italian") %>%
na.rm()
language_skills <- str_extract(skills, "english|german|french|italian") %>%
na.omit()
language_skills <- str_extract(
skills, "english|german|french|italian|russian|chinese|hindi|japanese|arabic") %>% ## Added most popular languages.
na.omit()
View(skills_df)
View(skills_df)
View(skills_df)
##analy - to capture all calls for analyticzal skills
analy_skills <- str_extract(
skills, "analy") %>%
na.omit()
excel_skills <- str_extract(skills, "excel") %>%
na.omit()
excel_skills
python_skills <- str_extract(skills, "python") %>%
na.omit()
str_extract(skills, "analy") %>%
na.omit() %>% n()
str_extract(skills, "analy") %>%
na.omit() %>% length()
skills_df <- data.frame(key_terms = c(), count = c())
## This will be easiest to do by looping over the key terms
key_terms <- c("analy", "english", "german", "french", "italian",
"excel", "python", "flexib", "business", "power", "azure", "aws",
"creativ", "curio", "detail", "communicat", "report", "tableau",
"data quality", "trend", "vba", "present", "project", "agile",
"cloud", "compliance", "cooper|collab|team", "dashboard", "warehouse",
"decision", "consulting", "sap", "data mana", "machine learn|ml",
"kpi", "leadership", "sql", "automation", "research", "reliab",
"rest|api", "stakeholder", "problem", "interpers")
skills_df <- data.frame(key_terms = c(), count = c())
for (term in key_terms) {
skill_count <- str_extract(skills, term) %>%
na.omit() %>%
length()
skills_df <- skills_df %>%
rbind(c(term, skill_count))
}
View(skills_df)
skills_df <- skills_df %>%
rename(
term=  1, count = 2
) %>%
arrange(desc(count))
View(skills_df)
View(skills_df)
skills_df <- skills_df %>%
rename(
term =  1, count = 2
) %>%
arrange(desc(count))
View(skills_df)
skills_df <- skills_df %>%
rename(
term =  1, count = 2
) %>%
mutate(count = as.numeric(count)) %>% ##Note count got converted to chr silently in the previous step
arrange(desc(count))
View(skills_df)
## This will be easiest to do by looping over the key terms
key_terms <- c("analy", "english", "german", "french", "italian",
"excel", "python", "flexib", "business", "power", "azure", "aws",
"creativ", "curio", "detail", "communicat", "report", "tableau",
"data quality", "trend", "vba", "present", "project", "agile",
"cloud", "compliance", "cooper|collab|team", "dashboard", "warehouse",
"decision", "consulting", "sap", "data mana", "machine learn|ml",
"kpi", "leadership", "sql", "automation", "research", "reliab",
"rest|api", "stakeholder", "problem", "interpers", "(?<= )r(?= )"
)
skills_df <- data.frame(key_terms = c(), count = c())
for (term in key_terms) {
skill_count <- str_extract(skills, term) %>%
na.omit() %>%
length()
skills_df <- skills_df %>%
rbind(c(term, skill_count))
}
skills_df <- skills_df %>%
rename(
term =  1, count = 2
) %>%
mutate(count = as.numeric(count)) %>% ##Note count got converted to chr silently in the previous step
arrange(desc(count))
View(skills_df)
## This will be easiest to do by looping over the key terms
key_terms <- c("analy", "english", "german", "french", "italian",
"excel", "python", "flexib", "business", "power", "azure", "aws",
"creativ", "curio", "detail", "communicat", "report", "tableau",
"data quality", "trend", "vba", "present", "project", "agile",
"cloud", "compliance", "cooper|collab|team", "dashboard", "warehouse",
"decision", "consulting", "sap", "data mana", "machine learn|ml",
"kpi", "leadership", "sql", "automation", "research", "reliab",
"rest|api", "stakeholder", "problem", "interpers", "(?<!\\w)r(?!\\w)"
)
skills_df <- data.frame(key_terms = c(), count = c())
for (term in key_terms) {
skill_count <- str_extract(skills, term) %>%
na.omit() %>%
length()
skills_df <- skills_df %>%
rbind(c(term, skill_count))
}
skills_df <- skills_df %>%
rename(
term =  1, count = 2
) %>%
mutate(count = as.numeric(count)) %>% ##Note count got converted to chr silently in the previous step
arrange(desc(count))
View(skills_df)
