{"frames":[{"func":"write_csv(test, \"test_returns.csv\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"write_delim(x, file, delim = \",\", na = na, append = append, col_names = col_names, \n    quote = quote, escape = escape, eol = eol, num_threads = num_threads, \n    progress = progress)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"check_column_types(x)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"cli_block(type = rlang::abort, {\n    cli::cli_text(\"`x` must not contain list or matrix columns:\")\n    cli::cli_alert_danger(\"invalid columns at index(s): {paste0(which(is_bad_column), collapse = '\\n')}\")\n})","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"type(msg, class = class)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd, .file)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in cli_block(type = rlang::abort, { : \n"}